// import type { Metadata } from "next";
// import localFont from "next/font/local";
// import { Poppins } from "next/font/google"; // 🚀 Importação da Poppins
// import "./globals.css";
// import { Provider } from "@/components/ui/provider"

// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// // 🚀 Configurar a fonte Poppins
// const poppins = Poppins({
//   subsets: ["latin"],
//   weight: ["100", "400", "600", "900"], // Escolha os pesos que precisa
//   variable: "--font-poppins",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout(props: { children: React.ReactNode }) {
//   const { children } = props
//   return (
//     <html suppressHydrationWarning>
//       <body>
//         <Provider>{children}</Provider>
//       </body>
//     </html>
//   )
// }



// import type { Metadata } from "next";
// import localFont from "next/font/local";
// import { Poppins } from "next/font/google";
// import "./globals.css";
// import { Provider } from "@/components/ui/provider";
// import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
// import { ChakraProvider } from "@chakra-ui/react";
// import { useState } from "react";

// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });

// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// const poppins = Poppins({
//   subsets: ["latin"],
//   weight: ["100", "400", "600", "900"],
//   variable: "--font-poppins",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({ children }: { children: React.ReactNode }) {
//   const [queryClient] = useState(() => new QueryClient());

//   return (
//     <html lang="pt-BR" suppressHydrationWarning>
//       <body className={`${geistSans.variable} ${geistMono.variable} ${poppins.variable}`}>
//         <QueryClientProvider client={queryClient}>
//           <ChakraProvider>
//             <Provider>{children}</Provider>
//           </ChakraProvider>
//         </QueryClientProvider>
//       </body>
//     </html>
//   );
// }

"use client"; // ⬅️ Torna o arquivo um Client Component

import localFont from "next/font/local";
import { Poppins } from "next/font/google";
import "./globals.css";
import { Provider } from "@/components/ui/provider";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { useState } from "react";
import { metadata } from "./metadata"; // Importando metadata

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["100", "400", "600", "900"],
  variable: "--font-poppins",
});

export default function RootLayout({ children }: { children: React.ReactNode }) {
  const [queryClient] = useState(() => new QueryClient());

  return (
    <html suppressHydrationWarning>
      <body className={`${geistSans.variable} ${geistMono.variable} ${poppins.variable}`}>
        <QueryClientProvider client={queryClient}>
          <Provider>{children}</Provider>
        </QueryClientProvider>
      </body>
    </html>
  );
}
